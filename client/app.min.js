/**
 * @Author hitjoshi@deloitte.com
 */
(function() {

    angular.module('myApp', ['ui.router', 'ngFileUpload', '720kb.datepicker', 'angularMoment', 'filters']);

    angular
        .module('myApp')
        .config(['$stateProvider', '$urlRouterProvider', config])
        .run(['$rootScope', '$location', 'authentication', run]);

    var GETH_HOSTNAME = "127.0.0.1"; // put your IP address!
    // var APP_HOSTNAME = "127.0.0.1";

    var GETH_RPCPORT = 8545;

    // if we use ui.router we have to change $routeProvider to $stateProvider
    // $locationProvider is used to remove #/ that Angular adds to route
    function config($stateProvider, $urlRouterProvider) {

        var signUpState = {
            name: 'signup',
            url: '/signup',
            templateUrl: 'partials/signup.html',
            controller: 'signUpCtrl',
            controllerAs: 'vm'
        }

        var loginState = {
            name: 'login',
            url: '/login',
            templateUrl: 'partials/login.html',
            controller: 'loginCtrl',
            controllerAs: 'vm'
        }

        var logoutState = {
            name: 'logout',
            url: '/logout',
            templateUrl: 'partials/logout.html'
            // controller: 'logoutCtrl',
            // controllerAs: 'vm'
        }

        var ipfs = {
            name: 'ipfs',
            url: '/ipfs',
            templateUrl: 'partials/ipfs.html',
            controller: 'ipfsCtrl',
            controllerAs: 'vm'
        }

        var dashboard = {
            name: 'dashboard',
            url: '/dashboard',
            templateUrl: 'partials/dashboard.html',
            controller: 'dashboardCtrl',
            controllerAs: 'vm'
        }
        var notification = {
            name: 'notification',
            url: '/notification',
            templateUrl: 'partials/notification.html',
            controller: 'notificationCtrl',
            controllerAs: 'vm'
        }

        var home = {
            name: 'home',
            url: '/home',
            templateUrl: 'partials/home.html',
            controller: 'homeCtrl',
            controllerAs: 'vm'
        }


        var initiateLc = {
            name: 'initiateLc',
            url: '/createlc',
            templateUrl: 'partials/applicantForm.html',
            controller: 'applicantCtrl',
            controllerAs: 'vm'
        }
        // The changes for wire frames starts here
        var issueBankLndingPage = {
            name: 'issueBankLndingPage',
            url: '/issuebank/home/',
            params: {
                'actionItem': null,
            },
            templateUrl: 'partials/issueBankLndingPage.html',
            controller: 'issueBankCtrl',
            controllerAs: 'vm'
        }

        var advisingBankLndingPage = {
            name: 'advisingBankLndingPage',
            url: '/advBank',
            params: {
                'actionItem': null,
            },
            templateUrl: 'partials/advisingBankLndingPage.html',
            controller: 'advisingBankCtrl',
            controllerAs: 'vm'
        }

        var acceptLodgementPage = {
            name: 'acceptLodgementPage',
            url: '/acceptLodgement',
            params: {
                'actionItem': null,
            },
            templateUrl: 'partials/acceptLodgementPage.html',
            controller: 'acceptLodgementCtrl',
            controllerAs: 'vm'
        }

        var beneficiaryLndingPage = {
            name: 'beneficiaryLndingPage',
            url: '/beneficiary/home',
            params: {
                'actionItem': null,
            },
            templateUrl: 'partials/beneficiaryLandingPage.html',
            controller: 'beneficiaryCtrl',
            controllerAs: 'vm'
        }

        var presentingLandingPage = {
            name: 'presentingLandingPage',
            url: '/presenting/home',
            params: {
                'actionItem': null,
            },
            templateUrl: 'partials/presentingLandingPage.html',
            controller: 'presentingCtrl',
            controllerAs: 'vm'
        }


        // The changes for wire frames Ends here

        var issuingForm = {
            name: 'issuingForm',
            url: '/issuingForm',
            templateUrl: 'partials/issuingForm.html',
            controller: 'issueFormCtrl',
            controllerAs: 'vm'
        }
        // // url will be vm/orderDetails
        // // nested states
        // var orderDetails = {
        //     name: 'applicantForm.orderDetails',
        //     url: '/orderDetails',
        //     templateUrl: 'partials/applicantOrderDetails.html',
        // }
        // var details = {
        //     name: 'details',
        //     url: '/details/:itemId',
        //     templateUrl: 'partials/details.html',
        //     controller: 'detailsCtrl',
        //     controllerAs: 'vm'
        // }


        // var upload = {
        //     name: 'upload',
        //     url: '/upload',
        //     templateUrl: 'partials/fileupload.html',
        //     controller: 'fileCtrl',
        //     controllerAs: 'vm'
        // }

        var blockexplorer = {
            name: 'blockexplorer',
            url: '/blockexplorer',
            templateUrl: 'partials/blockmain.html',
            controller: 'mainDashCtrl',
            controllerAs: 'vm'
        }
        //
        var blockid = {
            name: 'blockid',
            url: '/block/:blockId',
            templateUrl: 'partials/blockInfos.html',
            controller: 'blockInfosCtrl',
            controllerAs: 'vm'
        }
        //
        var transactionid = {
            name: 'transactionid',
            url: '/tx/:transactionId',
            templateUrl: 'partials/transactionInfos.html',
            controller: 'transactionInfosCtrl',
            controllerAs: 'vm'
        }
        //
        var address = {
            name: 'address',
            url: '/address/:addressId',
            templateUrl: 'partials/addressInfos.html',
            controller: 'addressInfosCtrl',
            controllerAs: 'vm'
        }
        var chainapi = {
            name: 'chainapi',
            url: '/chain/api',
            templateUrl: 'partials/api.html',
            controller: 'chainInfosCtrl',
            controllerAs: 'vm'
        }
        var chain = {
            name: 'chain',
            url: '/chain/',
            templateUrl: 'partials/chainInfos.html',
            controller: 'chainInfosCtrl',
            controllerAs: 'vm'
        }


        //
        // var difficulty = {
        //     name: 'difficulty',
        //     url: '/chain/difficulty',
        //     templateUrl: 'partials/api/difficulty.html',
        //     controller: 'chainInfosCtrl',
        //     controllerAs: 'vm'
        // }



        $stateProvider
            .state(loginState)
            .state(signUpState)
            .state(ipfs)
            .state(home)
            .state(initiateLc)
            .state(issueBankLndingPage)
            .state(advisingBankLndingPage)
            .state(beneficiaryLndingPage)
            .state(presentingLandingPage)
            .state(issuingForm)
            // .state(details)
            .state(logoutState)
            .state(notification)
            .state(dashboard)
            .state(acceptLodgementPage)

            .state(blockexplorer)
            .state(blockid)
            .state(transactionid)
            .state(address)
            .state(chainapi)
            .state(chain);

        // default route
        $urlRouterProvider.otherwise('/login');
        // enable html5Mode to get rid of # appended in URL
        // $locationProvider.html5Mode(true);
    }

    function run($rootScope, $location, authentication) {

        var web3 = require('web3');
        var url = $location.absUrl().split('#!')[0];
        var protocol = url.split(':')[0];
        var ethDomain = url.split(':')[1];
        var ethPort = "8545";
        console.log(protocol + ":" + ethDomain + ":" + ethPort);
        if (ethDomain == "52.172.44.68") {
            // point to the server where ethereum is deployed
            ethDomain = "172.18.25.180";
        }
        var web3 = new Web3(new Web3.providers.HttpProvider(protocol + ":" + ethDomain + ":" + ethPort));
        $rootScope.web3 = web3;
        $rootScope.$on('$locationChangeStart', function(event, nextRoute, currentRoute) {
            var publicPages = ['/login', '/signup', '/logout'];
            var restrictedPage = publicPages.indexOf($location.path()) === -1;
            if (restrictedPage && !authentication.isLoggedIn()) {
                $location.path('/login');
            }
        });
    }

})();

(function() {
    "use strict";
    angular
        .module('myApp')
        .service('apiCall', apiCall);

    apiCall.$inject = ['$http', 'authentication', '$state'];

    function apiCall($http, authentication, $state) {
        var makeCall = function(url, httpMethod, data){
          console.log("inside apiCall service !!");
          var result = {
            status:"",
            data:""
          };
          if( httpMethod === "post" ){
            console.log("post: " + url);
            return $http.post(url,data,{
              headers: {
                  Authorization: 'Bearer ' + authentication.getToken()
              }
            }).then(
              function success(response){
                // console.log(response.data.message);
                result.status = "success";
                result.data = response.data.message;
                return result;
              },
              function error(response){
                var user = authentication.currentUser();
                if(user.role!=200) {
                  result.status = "Role Based Authentication Failed";
                  console.log("Wrong user role");
                  $state.go('home');
                }
                // console.log(response.data.message);
                result.status = "failure";
                result.data = response.data.message;
                return result;
              }
            );
          }
          else if( httpMethod === "get"){
            console.log("get: " + url);
            return $http.get(url,{
              headers: {
                  Authorization: 'Bearer ' + authentication.getToken()
              }
            }).then(
              function success(response){
                // console.log(response.data.message);
                result.status = "success";
                result.data = response.data.message;
                // console.log(result.data);
                return result;
              },
              function error(response){
                var user = authentication.currentUser();
                if(user.role!=200) {
                  result.status = "Role Based Authentication Failed";
                  console.log("Wrong user role");
                  $state.go('home');
                }
                // console.log(response.data.message);
                result.status = "failure";
                result.data = response.data.message;
                return result;
              }
            );
          }
          else{
            console.log("Not a supported httpMethod");
          }
        };
        var service = {
          makeCall: makeCall,
        };

        return service;
    }


})();

(function() {
    "use strict";
    angular
        .module('myApp')
        .service('authentication', authentication);

    authentication.$inject = ['$http', '$window'];

    function authentication($http, $window) {


        var saveToken = function(token) {
            $window.sessionStorage['mean-token'] = token;
        };

        var getToken = function() {
            return $window.sessionStorage['mean-token'];
        };

        var isLoggedIn = function() {
            var token = getToken();
            var payload;

            if (token) {
                payload = token.split('.')[1];
                payload = $window.atob(payload);
                payload = JSON.parse(payload);
                return payload.exp > Date.now() / 1000;
            } else {
                return false;
            }
        };

        var currentUserRole = function() {
            var user = this.currentUser();
            var role;
            if (user && user !== "") {
                role = user.role;
            }
            return role;
        };

        var currentUser = function() {
            if (isLoggedIn()) {
                var token = getToken();
                var payload = token.split('.')[1];
                payload = $window.atob(payload);
                payload = JSON.parse(payload);
                return {
                    email: payload.email,
                    name: payload.name,
                    role: payload.role,
                    userId: payload.userId
                };
            }
        };

        var register = function(user) {
            console.log(user);
            return $http.post('/user/register', user).then(
                function(response) {
                    console.log(response.data);
                    saveToken(response.data.token);
                    return response;
                },
                function(response) {
                    // if error
                    return response;
                });
        };

        var login = function(user) {
            return $http.post('/user/login', user).then(
                function(response) {
                    // Save token in local storage
                    saveToken(response.data.token);
                    return response;
                },
                function(response) {
                    // return error response
                    return response;

                });
        };



        var logout = function() {
            $window.sessionStorage.removeItem('mean-token');
        };
        var service = {
            currentUser: currentUser,
            saveToken: saveToken,
            getToken: getToken,
            isLoggedIn: isLoggedIn,
            register: register,
            login: login,
            role: currentUserRole,
            logout: logout
        };

        return service;

    }


})();



(function() {
    angular.module('filters', [])
        .filter('truncate', function() {
            return function(text, length, end) {
                if (isNaN(length))
                    length = 10;

                if (end === undefined)
                    end = "...";

                if (text.length <= length || text.length - end.length <= length) {
                    return text;
                } else {
                    return String(text).substring(0, length - end.length) + end;
                }
            };
        }).
    filter('diffFormat', function() {
        return function(diffi) {
            if (isNaN(diffi)) return diffi;
            var n = diffi / 1000000000000;
            return n.toFixed(3) + " T";
        };
    }).
    filter('stylize', function() {
        return function(style) {
            if (isNaN(style)) return style;
            var si = '<span class="btn btn-primary">' + style + '</span>';
            return si;
        };
    }).
    filter('stylize2', function() {
        return function(text) {
            if (isNaN(text)) return text;
            var si = '<i class="fa fa-exchange"></i> ' + text;
            return si;
        };
    }).
    filter('hashFormat', function() {
        return function(hashr) {
            if (isNaN(hashr)) return hashr;
            var n = hashr / 1000000000000;
            return n.toFixed(3) + " TH/s";
        };
    }).
    filter('gasFormat', function() {
        return function(txt) {
            if (isNaN(txt)) return txt;
            var b = new BigNumber(txt);
            return b.toFormat(0) + " m/s";
        };
    }).
    filter('BigNum', function() {
        return function(txt) {
            if (isNaN(txt)) return txt;
            var b = new BigNumber(txt);
            var w = web3.fromWei(b, "ether");
            return w.toFixed(6) + " ETH";
        };
    }).
    filter('sizeFormat', function() {
        return function(size) {
            if (isNaN(size)) return size;
            var s = size / 1000;
            return s.toFixed(3) + " kB";
        };
    });
})();

(function() {

  goBack.$inject = ["$window"];
  angular
      .module('myApp')
      .directive('goBack', goBack);

  function goBack( $window ) {
    return function($scope, $element){
      $element.on('click', function(){
        $window.history.back();
      })
  }
  }

})();

(function() {

    angular
        .module('myApp')
        .directive('limitToMaxMin', limitToMaxMin);

    function limitToMaxMin() {
        return {
            restrict: 'A',
            require: 'ngModel',
            scope:{
              ngModel: '='
            },
            link: function(scope, element, attributes) {
              // element.on("keydown keyup", function(e) {
              element.on("blur", function(e) {
                if (Number(element.val()) > Number(attributes.max) &&
                      e.keyCode != 46 // delete
                      &&
                      e.keyCode != 8 // backspace
                    ) {
                      e.preventDefault();
                      element.val(attributes.max);
                      scope.ngModel = Number(attributes.max);
                    }
                if (Number(element.val()) < Number(attributes.min) &&
                      e.keyCode != 46 // delete
                      &&
                      e.keyCode != 8 // backspace
                    ) {
                      e.preventDefault();
                      element.val(attributes.min);
                      scope.ngModel = Number(attributes.min);
                    }
              });
            }
        };
    }

})();

(function() {

    angular
        .module('myApp')
        .directive('navigation', navigation);

    function navigation() {
        return {
            restrict: 'EA',
            templateUrl: '../../partials/navigation.html',
            controller: 'navigationCtrl as navvm'
        };
    }
    
})();

(function() {

    printpage.$inject = ["$timeout"];
    angular
        .module('myApp')
        .directive('printpage', printpage);

    function printpage( $timeout ) {
        return {
            restrict: 'E',
            template: "<button class='btn btn-inverse btn-lg btn-login'>" +
            					  "Print" +
            					"</button>",
            link: function(scope, element, attributes) {
              element.on("click", function(e) {
                var expandButton = angular.element("#collapse-init");
                var expandText = expandButton.text();
                if( expandText.trim() === "Expand All" ){
                  expandButton.click();
                }
                $timeout( function(){ window.print() }, 2000);
              });
            }
        };
    }

})();

(function() {
    angular
        .module('myApp')
        .controller('acceptLodgementCtrl', acceptLodgementCtrl);

    acceptLodgementCtrl.$inject = ['$scope','$http','authentication','$rootScope','$window','$state','$stateParams'];

    function acceptLodgementCtrl($scope,$http,authentication, $rootScope,$window,$state,$stateParams) {
		console.log("inside acceptLodgementCtrl-1")
	  var vm = this;
       vm.init = function(){
	     $http.get('/acceptLodgement/lcDetails', {
			 headers: {
				 Authorization: 'Bearer ' + authentication.getToken()
			 }
		 }).then(function(response) {
			$scope.acptLdgmentLCList = response.data;
			console.log($scope.acptLdgmentLCList);
		 }, function(response) {
			   var user = authentication.currentUser();
			   if(user.role!=200) {
				   $scope.errorMsg = "Not the correct role";
				   $state.go('home');
			   }
			 })
       .then( function(){
         if( $stateParams.actionItem != "" && $stateParams.actionItem != null ){
           console.log("action item not null");
           console.log($stateParams.actionItem);

           console.log($scope.acptLdgmentLCList);
         var selectedLcNumber = $scope.acptLdgmentLCList.filter(function( dataObj ) {
                 return (dataObj.lcNumber == $stateParams.actionItem ) ;
               });
         $scope.acptLdgmentFormDetails = selectedLcNumber[0];
         vm.showAccordion = true;
         $stateParams.actionItem = "";
         }
       });
	   }

	  /* function to enable Accordian on selection of LC Number on the HTML page */
	  vm.fetchDetail = function(lcDetails){
      if( lcDetails != null && lcDetails != ""){
        vm.showAccordion = true;
        vm.submitMessage = "";
      }
	  }


	  /* Function to clear the fields on reset button */
	  vm.clear = function(){
			console.log("clear all fields inside acceptLodgementService-2");
			vm.submitMessage = "";
		   if( $scope.acptLdgmentFormDetails != "" && $scope.acptLdgmentFormDetails != undefined
          && $scope.acptLdgmentFormDetails != null ){
			  console.log("clearing all fields");
			  $scope.acptLdgmentFormDetails = "";
			  vm.showAccordion=false;
		  }

	  }

	  /* Function to Save the Advising bank screen details */
	  vm.submit = function(lcDetails){
		  console.log("inside acceptLodgementController->submit()");
		  console.log("contractID="+lcDetails._id);
		  var contractID = {'contractID': lcDetails._id};
		   $http.post('/acceptLodgement/acceptLC',contractID, {
                headers: {
                    Authorization: 'Bearer ' + authentication.getToken()
                }
            }).then(
                function(response) {
                  vm.init();
                  vm.clear();
                  vm.submitMessage="Lodgement Accepted : Block chain processing initiated";
                  vm.showAccordion = false;
                },
                function(response) {
                    console.log(response.data.message);
                });
		}

	  vm.setTab = function(index){
        if( index == $rootScope.tabIdentifier ){
          return "active";
        }
        else{
          return false;
        }
      }
	  vm.init();
    }
})();

(function() {
    angular
        .module('myApp')

        .controller('applicantCtrl', applicantCtrl);

    applicantCtrl.$inject = ['$scope', '$http', 'authentication', 'Upload', '$timeout', '$state'];


    function applicantCtrl($scope, $http, authentication, Upload, $timeout, $state) {
        console.log("inside applicantForm controller")
        var vm = this;
        // using below regex in ng-pattern
        $scope.onlyNumbers = /^[0-9]{1,7}$/;

        $http.get('/applicant/onload/', {
            headers: {
                Authorization: 'Bearer ' + authentication.getToken()
            }
        }).then(function(response) {
            $scope.appForm = {};
            $scope.today = new Date();
            var user = authentication.currentUser();
            var sellers = [];
            for (i = 0; i < response.data.length; i++) {
                if (response.data[i].role == 100 && user.userId == response.data[i]._id) {
                    var buyer = response.data[i];
                    console.log(buyer);
                    $scope.appForm.buyerId = buyer._id;
                    $scope.appForm.buyerName = buyer.name;
                    $scope.appForm.buyerAdd = buyer.address;
                    $scope.appForm.buyerAccNumber = buyer.accountDetail.accountNo;
                    //$scope.appForm.buyer=buyer;

                } else if (response.data[i].role == 400) {
                    var seller = {
                      sellerId:'',
                      name:'',
                      sellerAdd:'',
                      sellerAccNumber:''
                    };
                    seller.sellerId=response.data[i]._id;
                    seller.name=response.data[i].name;
                    seller.sellerAdd=response.data[i].address;
                    seller.sellerAccNumber=response.data[i].accNumber;
                    sellers.push(seller);
                } else if (response.data[i].role == 200) {
                    var issueBank = response.data[i];
                    $scope.appForm.bankId = issueBank._id;
                    $scope.appForm.issueBankName = issueBank.entity;
                    $scope.appForm.issueBankAddress = issueBank.address;
                    $scope.appForm.issueBankBranch = issueBank.branch;
                    $scope.appForm.issueBankAddress = issueBank.address;
                } else if (response.data[i].role == 300) {
                    var advBank = response.data[i];
                    $scope.appForm.advBankId = advBank._id;
                    $scope.appForm.advBankName = advBank.entity;
                    $scope.appForm.advBankBranch = advBank.branch;
                }
            }

            $scope.appForm.sellers = sellers;
            console.log($scope.appForm.sellers);
        }, function(response) {
            if (user.role != 100) {
                $scope.errorMsg = "Not the correct role";
                console.log("Wrong user role");
                $state.go('home');
            }
            console.log(response.status);
        });

        vm.clear = function(appForm) {
            console.log("Clear section ");
            appForm.poNumber = "";
            appForm.poItem = "";
            appForm.poValue = "";
            appForm.lcDuration = "";
            appForm.tolerancePercent = "";
            appForm.usancePeriod = "";
            appForm.initiatorIpfcDocHash = "";
            appForm.poInitDate = "";
            appForm.message = "";
            appForm.poQuantity = "";
            $scope.submitData = "";
            $scope.createLcRequestForm.poNumber.$setValidity("poUnique", true);
            $scope.createLcRequestForm.$setPristine();
        }

        $scope.uploadFiles = function(files) {
            console.log("Uploading ----------------");
            $scope.appForm.files = files;
            $scope.appForm.message = $scope.appForm.files[0].name + " file selected";
        };

        vm.submit = function(appForm) {
            console.log(appForm);
            var mybody = angular.element(document).find('body');
            mybody.addClass('waiting');
            console.log("This is for submit in controller" + appForm);
            console.log("poNumber=" + appForm.poNumber);
            console.log("Currency ===> " + appForm.poCurrency);
            console.log("Seller in controller ----------"+appForm.sellerId);
            console.log("This is for submit in controller    Files   " + appForm.files);
            var files = appForm.files;


            var fileName = files[0].name;
            console.log(" Controller naem       " + fileName);

            if (files && files.length) {
                Upload.upload({
                    url: '/applicant/upload',
                    data: {
                        files: files
                    }
                }).then(function(response) {
                    $timeout(function() {
                        $scope.result = response.data;
                        console.log("The response for upload");
                        console.log(response);
                        $scope.appForm.initiatorIpfcDocHash = response.data[0].hash;
                        $scope.appForm.initiaterFileName = fileName;
                        $scope.appForm.userDate = new Date();
                        $scope.appForm.poCurrency = "$";
                        $http.post('/applicant/submit/', appForm, {
                            headers: {
                                Authorization: 'Bearer ' + authentication.getToken()
                            }
                        }).then(function(response) {
                            console.log("RESPOSNSE________");
                            vm.clear($scope.appForm);
                            $scope.submitData = response.data;
                            mybody.removeClass('waiting');
                            console.log(response.data);

                        }, function(response) {
                            mybody.removeClass('waiting');
                            console.log(response.status);
                        });
                    });
                }, function(response) {

                    if (response.status > 0) {
                        $scope.errorMsg = response.status + ': ' + response.data;
                    }
                }, function(evt) {
                    $scope.progress =
                        Math.min(100, parseInt(100.0 * evt.loaded / evt.total));
                }).then(function() {
                    // console.log("THE LOCAL SAVE");
                    // Upload.upload({
                    //   url: '/applicant/uploadLocal',
                    //   data: {
                    //       files: files
                    //   }
                    // });

                });
            }
        };

        vm.populateBenefiary = function(seller) {
          console.log("in selection "+seller._id);

            $scope.appForm.sellerId = seller._id;
            $scope.appForm.sellerName = seller.name;
            $scope.appForm.sellerAdd = seller.sellerAdd;
            $scope.appForm.sellerAccNumber = seller.sellerAccNumber;
        };

        // Function to check if PO Number is unique for a buyerId
        vm.validatePoNumber = function(poNumber) {
            console.log("validating PO number on blur");
            console.log("ponumber is : " + poNumber);
            var buyerId = authentication.currentUser().userId;
            if (poNumber != undefined) {
                // encoding while sending as get query parameter
                poNumber = encodeURIComponent(poNumber);
                $http.get('/applicant/validatePoNumber/' + poNumber + '/' + buyerId, {
                    headers: {
                        Authorization: 'Bearer ' + authentication.getToken()
                    },
                }).then(function(response) {
                        // if poNumber is unique
                        console.log(response.data.message);
                        $scope.createLcRequestForm.poNumber.$setValidity("poUnique", true);
                    },
                    function(err) {
                        // if poNumber already exists in DB
                        console.log(err.data.message);
                        $scope.createLcRequestForm.poNumber.$setValidity("poUnique", false);
                    });
            }
        }

        vm.removeUniqueMsg = function() {
            $scope.createLcRequestForm.poNumber.$setValidity("poUnique", true);
        }




    }
})();

/**
  * @author sukohli@deloitte.com
  * /beneficiary/home -> controller
  * This controller handles Share Lodgement
*/
(function() {
    angular
        .module('myApp')
        .controller('beneficiaryCtrl', beneficiaryCtrl);

    beneficiaryCtrl.$inject = ['$state','apiCall','authentication', '$scope', '$http', 'Upload', '$timeout','$stateParams'];

    function beneficiaryCtrl($state, apiCall, authentication, $scope, $http, Upload, $timeout, $stateParams) {
        var vm = this;
        vm.showAccordion = false;
        // Prepopulate LC Number dropdown
        vm.init = function(){
          console.log("Prepopulate init function called !!");
          // get LC numbers from mongo
          $http.get('/beneficiary/getLcNumbers/', {
              headers: {
                  Authorization: 'Bearer ' + authentication.getToken()
              }
          })
          .then( function(response){
            console.log("Response Lc Numbers");            
            vm.lodgementDetails = response.data;
          },
          function(err){
            var user = authentication.currentUser();
     			   if(user.role!=400) {
     				   $scope.errorMsg = "Not the correct role";
     				   $state.go('home');
     			   }
          })
          .then( function(){
            if( $stateParams.actionItem != "" && $stateParams.actionItem != null ){
              console.log("action item not null");
              console.log($stateParams.actionItem);

              console.log(vm.lodgementDetails);
            var selectedLcNumber = vm.lodgementDetails.filter(function( dataObj ) {
                    return (dataObj.lcNumber == $stateParams.actionItem ) ;
                  });
            // console.log(selectedLcNumber[0]);
            vm.shareLodgement = selectedLcNumber[0];
            vm.showAccordion = true;
            $stateParams.actionItem = "";
            }
          });

          // get Presenting Bank Details
          $http.get('/beneficiary/getPresentingBank',{
            headers: {
                Authorization: 'Bearer ' + authentication.getToken()
            }
          })
          .then( function(response){
            console.log("Response Presenting Bank");
            console.log(response.data);
            vm.presentingBank = response.data[0];
          }, function(err){
            var user = authentication.currentUser();
     			   if(user.role!=400) {
     				   $scope.errorMsg = "Not the correct role";
     				   $state.go('home');
     			   }
          });
        }

        vm.clear = function(){
          vm.showAccordion = false;
          vm.shareLodgement = "";
          vm.invoiceFile="";
          vm.invoiceFileArray="";
          vm.lodgementFiles="";
          vm.submitMessage="";
          vm.createLodgementForm.$setPristine();
          vm.createLodgementForm.billNumber.$setValidity("billNumberUnique",true);
        }

        vm.fetchDetail = function(selectedLc){
          console.log(" fetch details function");
          console.log(selectedLc);
          vm.showAccordion = true;
        }

        // Function to check if Bill Number is unique for a beneficiary
        vm.validateBillNumber = function(billNumber){
          console.log("validating billNumber on blur");
          console.log("billNumber is : " + billNumber);
          // encoding while sending as get query parameter
          billNumber = encodeURIComponent(billNumber);
          console.log("Encoding billNumber is : " + billNumber);
          var sellerId = authentication.currentUser().userId;
          if( billNumber != undefined && billNumber != 'undefined'){
            $http.get('/beneficiary/validateBillNumber/' + billNumber + '/' + sellerId, {
                headers: {
                    Authorization: 'Bearer ' + authentication.getToken()
                },
            }).then(function(response) {
                      // if billNumber is unique
                      console.log(response.data.message);
            },
                function(err) {
                  // if billNumber already exists in DB
                  console.log(err.data.message);
                  vm.createLodgementForm.billNumber.$setValidity("billNumberUnique",false);
            });
          }
        }

        vm.removeUniqueMsg = function(){
          vm.createLodgementForm.billNumber.$setValidity("billNumberUnique",true);
        }

        vm.selectFiles = function(files) {
            console.log("Uploading ----------------");
            vm.lodgementFiles = files;
            console.log(vm.lodgementFiles);
        };

        vm.selectInvoice = function(file){
          // console.log(file);
          if( file.length > 1){
            // remove extra file
            console.log("Remove extra file");
            file.shift();
          }
          console.log("Uploading Invoice----------------");
          vm.invoiceFile = file[0];
          vm.invoiceFileArray = file;
          console.log(vm.invoiceFile);
        }

        vm.removeAttachement = function(index,typeOfFile){
          console.log("type of file is: " + typeOfFile);
          if( typeOfFile === "others"){
            console.log("sent index is : " + index);
            vm.lodgementFiles.splice(index, 1);
          }
          if( typeOfFile === "invoice"){
            console.log("sent index is : " + index);
            vm.invoiceFile="";
            vm.invoiceFileArray.splice(index, 1);
          }
        }

        vm.submit = function(){
          console.log("Submit function called!");
          var mybody = angular.element(document).find('body');
          mybody.addClass('waiting');
          console.log(vm.shareLodgement);
          var lodgementRequest = {
            "contractID": vm.shareLodgement._id,
            "billNumber": vm.shareLodgement.billNumber,
            "billQuantity": vm.shareLodgement.billQuantity,
            "billAmount": vm.shareLodgement.billAmount,
            "billLading":vm.shareLodgement.billLading,
            "presentingBankId":vm.presentingBank._id
          };
          console.log(lodgementRequest);
          // files is a new array, copy of lodgementFiles
          var files = vm.lodgementFiles.slice();
          var invoiceFile = vm.invoiceFile;
          console.log("lodgementFiles are: ");
          console.log(files);
          if (files && files.length && invoiceFile) {
              // disabling submit button
              vm.clear();
              vm.submitMessage  = "Lodgement Creation And File Upload In Progress, Please Wait.";
              // appends to start of array
              files.unshift(invoiceFile);
              console.log(files);
              Upload.upload({
                  url: '/beneficiary/upload',
                  data: {
                      files: files
                  }
              }).then(function(response) {
                  $timeout(function() {
                      console.log("The response for lodgementFiles upload");
                      console.log(response);
                      var lodgementDocuments = [];
                      for( var i=0; i<response.data.length; i++){
                        if( i == 0 ){
                          var tempDoc = {
                            "ipfsDocHash" : response.data[i].hash,
                            "fileName" : response.data[i].fileName,
                            "fileType" : "invoice"
                          }
                        }
                        else{
                          var tempDoc = {
                            "ipfsDocHash" : response.data[i].hash,
                            "fileName" : response.data[i].fileName,
                            "fileType" : "others"
                          }
                        }
                        lodgementDocuments.push(tempDoc);
                      }
                      console.log(lodgementDocuments);
                      lodgementRequest["lodgementDocuments"] = lodgementDocuments;
                      $http.post('/beneficiary/saveLodgementForm/', lodgementRequest, {
                          headers: {
                              Authorization: 'Bearer ' + authentication.getToken()
                          }
                      }).then(function(response) {
                          console.log("RESPONSE From save lodgementForm!");
                          // $scope.submitData = response.data;
                          console.log(response.data);
                          vm.init();
                          vm.clear();
                          mybody.removeClass('waiting');
                          vm.submitMessage = response.data.message;
                      }, function(err) {
				                  mybody.removeClass('waiting');
                          console.log(err.status);
                      });
                  });
              }, function(err) {

                  if (err.status > 0) {
                      $scope.errorMsg = err.status + ': ' + err.data;
                  }
              }, function(evt) {
                  $scope.progress =
                      Math.min(100, parseInt(100.0 * evt.loaded / evt.total));
              }).then(function(){
                console.log("THE LOCAL SAVE");
                // Upload.upload({
                //   url: '/beneficiary/uploadLocal',
                //   data: {
                //       files: files
                //   }
                // });
              });
          }
          else{
            console.log("Files Not Uploaded Properly");
            // disabling submit button
            vm.clear();
            vm.submitMessage  = "--- Files Not Uploaded Properly, Please Try Again ---";
          }
        }

        vm.init();
    };
})();

(function() {
    angular
        .module('myApp')

        .controller('addressInfosCtrl', addressInfosCtrl);


    addressInfosCtrl.$inject = ['$rootScope', '$scope', '$location', '$stateParams', '$q'];

    function addressInfosCtrl($rootScope, $scope, $location, $routeParams, $q) {
        var web3 = $rootScope.web3;
        $scope.init = function() {

            $scope.addressId = $routeParams.addressId;
            var addressId = $routeParams.addressId;

            if ($scope.addressId !== undefined) {
                getAddressBalance()
                    .then(function(result) {
                        $scope.balance = web3.fromWei(result).toNumber();
                    });
                getAddressTransactionCount()
                    .then(function(result) {
                        $scope.txCount = result;
                    });
                getCode()
                    .then(function(result) {
                        $scope.code = result;
                    });
                getTransactions()
                    .then(function(result) {
                        console.log("getTransactions is executed!")
                        console.log(result)
                        $scope.transactions = result;
                    });
                getETHUSD();
            } else {
                $location.path("/");
            }

            function getAddressBalance() {
                var deferred = $q.defer();
                web3.eth.getBalance($scope.addressId, function(error, result) {
                    if (!error) {
                        deferred.resolve(result);
                    } else {
                        deferred.reject(error);
                    }
                });
                return deferred.promise;
            }

            function getETHUSD() {
                $.getJSON("https://coinmarketcap-nexuist.rhcloud.com/api/eth/price", function(json) {
                    var price = json.usd;
                    var ethusd = price.toFixed(2);
                    var balanceusd = "$" + ethusd * $scope.balance;
                    $scope.balanceusd = balanceusd;
                    //console.log("Balance in USD " + $scope.balanceusd);
                });
            }

            function getAddressTransactionCount() {
                // var success=$.getScript('../../config.js');
                var deferred = $q.defer();
                web3.eth.getTransactionCount($scope.addressId, function(error, result) {
                    if (!error) {
                        deferred.resolve(result);
                    } else {
                        deferred.reject(error);
                    }
                });
                return deferred.promise;
            }

            function getCode() {
                var deferred = $q.defer();
                web3.eth.getCode($scope.addressId, function(error, result) {
                    if (!error) {
                        deferred.resolve(result);
                    } else {
                        deferred.reject(error);
                    }
                });
                return deferred.promise;
            }

            // TODO: not working yet:
            function getTransactions() {
                var deferred = $q.defer();

                /*

                // See https://github.com/ethereum/go-ethereum/issues/1897#issuecomment-166351797
                // plus the following posts
                // Giving up for now. Invested another 3 hours without results. Grrrr..

                // var options="address:"+$scope.addressId;
                // var options = {"address": "0xf2cc0eeaaaed313542cb262b0b8c3972425143f0"}; // $scope.addressId}; // , "topics": [null]
                // var options = 'pending'
                // console.log(options);

                var options = {fromBlock: 0, toBlock: 'latest', address: "0xf2cc0eeaaaed313542cb262b0b8c3972425143f0"};

                var myfilter = web3.eth.filter(options);

                // var myfilter= web3.eth.filter(options);
                console.log(myfilter);


                myfilter.get(function (error, log) {
                	  console.log("get error:", error);
                	  console.log("get log:", log);
                	});

                web3.eth.filter(options,
                		function(error, result){
                			if(!error){
                				console.log("no error");
                				deferred.resolve(result);
                				}
                			else{
                				console.log("error");
                				deferred.reject(error);
                				}
                			});

                */
                return deferred.promise;

            }
        };
        $scope.init();

        function hex2a(hexx) {
            var hex = hexx.toString(); //force conversion
            var str = '';
            for (var i = 0; i < hex.length; i += 2)
                str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));
            return str;
        }
    };
})();

(function() {
    angular
        .module('myApp')

        .controller('blockInfosCtrl', blockInfosCtrl);


    blockInfosCtrl.$inject = ['$rootScope', '$scope', '$location', '$stateParams', '$q'];


    function blockInfosCtrl($rootScope, $scope, $location, $stateParams, $q) {
        var web3 = $rootScope.web3;
        var BigNumber = require('bignumber.js');
        $scope.init = function() {


            $scope.blockId = $stateParams.blockId;


            if ($scope.blockId !== undefined) {

                getBlockInfos()
                    .then(function(result) {
                        var number = web3.eth.blockNumber;

                        $scope.result = result;

                        $scope.numberOfUncles = result.uncles.length;

                        //if ($scope.numberOfUncles!=0) {
                        //	uncle1=result.uncles[0];
                        //	console.log(web3.eth.getUncle(uncle1));
                        //}

                        if (result.hash !== undefined) {
                            $scope.hash = result.hash;
                        } else {
                            $scope.hash = 'pending';
                        }
                        if (result.miner !== undefined) {
                            $scope.miner = result.miner;
                        } else {
                            $scope.miner = 'pending';
                        }
                        $scope.gasLimit = result.gasLimit;
                        $scope.gasUsed = result.gasUsed;
                        $scope.nonce = result.nonce;
                        var diff = ("" + result.difficulty).replace(/['"]+/g, '') / 1000000000000;
                        $scope.difficulty = diff.toFixed(3) + " T";
                        $scope.gasLimit = new BigNumber(result.gasLimit).toFormat(0) + " m/s"; // that's a string
                        $scope.gasUsed = new BigNumber(result.gasUsed).toFormat(0) + " m/s";
                        $scope.nonce = result.nonce;
                        $scope.number = result.number;
                        $scope.parentHash = result.parentHash;
                        $scope.uncledata = result.sha3Uncles;
                        $scope.rootHash = result.stateRoot;
                        $scope.blockNumber = result.number;
                        $scope.timestamp = new Date(result.timestamp * 1000).toUTCString();
                        $scope.extraData = result.extraData.slice(2);
                        $scope.dataFromHex = hex2a(result.extraData.slice(2));
                        $scope.size = result.size;
                        $scope.firstBlock = false;
                        $scope.lastBlock = false;
                        if ($scope.blockNumber !== undefined) {
                            $scope.conf = number - $scope.blockNumber + " Confirmations";
                            if (number === $scope.blockNumber) {
                                $scope.conf = 'Unconfirmed';
                                $scope.lastBlock = true;
                            }
                            if ($scope.blockNumber === 0) {
                                $scope.firstBlock = true;
                            }
                        }

                        if ($scope.blockNumber !== undefined) {
                            var info = web3.eth.getBlock($scope.blockNumber);
                            if (info !== undefined) {
                                var newDate = new Date();
                                newDate.setTime(info.timestamp * 1000);
                                $scope.time = newDate.toUTCString();
                            }
                        }
                    });

            } else {
                $location.path("/");
            }


            function getBlockInfos() {
                var deferred = $q.defer();

                web3.eth.getBlock($scope.blockId, function(error, result) {
                    if (!error) {
                        deferred.resolve(result);
                    } else {
                        deferred.reject(error);
                    }
                });
                return deferred.promise;

            }


        };
        $scope.init();

        // parse transactions
        $scope.transactions = []

        web3.eth.getBlockTransactionCount($scope.blockId, function(error, result) {
            var txCount = result;
            $scope.numberOfTransactions = txCount;
            for (var blockIdx = 0; blockIdx < txCount; blockIdx++) {
                web3.eth.getTransactionFromBlock($scope.blockId, blockIdx, function(error, result) {
                    // console.log("Result: ", result);
                    web3.eth.getTransactionReceipt(result.hash, function(error, receipt) {
                        var transaction = {
                            id: receipt.transactionHash,
                            hash: receipt.transactionHash,
                            from: receipt.from,
                            to: receipt.to,
                            gas: receipt.gasUsed,
                            input: result.input.slice(2),
                            value: web3.fromWei(result.value, "ether"),
                            contractAddress: receipt.contractAddress
                        }
                        $scope.$apply(
                            $scope.transactions.push(transaction)
                        );
                    });
                })
            }
        });

        function hex2a(hexx) {
            var hex = hexx.toString(); //force conversion
            var str = '';
            for (var i = 0; i < hex.length; i += 2)
                str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));

            return str;
        }
    }
})();

(function() {
    angular
        .module('myApp')

        .controller('chainInfosCtrl', chainInfosCtrl);

    chainInfosCtrl.$inject = ['$rootScope', '$scope', '$location', '$routeParams', '$q'];

    function chainInfosCtrl($rootScope, $scope, $location, $routeParams, $q) {
        var web3 = $rootScope.web3;
        var BigNumber = require('bignumber.js');
        $scope.init = function() {
            getChainInfos()
                .then(function(result) {

                    $scope.result = result; // just a dummy value, but following Whit's example.

                    $scope.blockNum = web3.eth.blockNumber; // now that was easy

                    if ($scope.blockNum !== undefined) {

                        // TODO: put the 2 web3.eth.getBlock into the async function below
                        //       easiest to first do with fastInfosCtrl
                        var blockNewest = web3.eth.getBlock($scope.blockNum);

                        if (blockNewest !== undefined) {

                            // difficulty
                            $scope.difficulty = blockNewest.difficulty;
                            $scope.difficultyToExponential = blockNewest.difficulty.toExponential(3);

                            $scope.totalDifficulty = blockNewest.totalDifficulty;
                            $scope.totalDifficultyToExponential = blockNewest.totalDifficulty.toExponential(3);

                            $scope.totalDifficultyDividedByDifficulty = $scope.totalDifficulty.dividedBy($scope.difficulty);
                            $scope.totalDifficultyDividedByDifficulty_formatted = $scope.totalDifficultyDividedByDifficulty.toFormat(1);

                            $scope.AltsheetsCoefficient = $scope.totalDifficultyDividedByDifficulty.dividedBy($scope.blockNum);
                            $scope.AltsheetsCoefficient_formatted = $scope.AltsheetsCoefficient.toFormat(4);

                            // large numbers still printed nicely:
                            $scope.difficulty_formatted = $scope.difficulty.toFormat(0);
                            $scope.totalDifficulty_formatted = $scope.totalDifficulty.toFormat(0);

                            // Gas Limit
                            $scope.gasLimit = new BigNumber(blockNewest.gasLimit).toFormat(0) + " m/s";

                            // Time
                            var newDate = new Date();
                            newDate.setTime(blockNewest.timestamp * 1000);
                            $scope.time = newDate.toUTCString();

                            $scope.secondsSinceBlock1 = blockNewest.timestamp - 1438226773;
                            $scope.daysSinceBlock1 = ($scope.secondsSinceBlock1 / 86400).toFixed(2);

                            // Average Block Times:
                            // TODO: make fully async, put below into 'fastInfosCtrl'

                            var blockBefore = web3.eth.getBlock($scope.blockNum - 1);
                            if (blockBefore !== undefined) {
                                $scope.blocktime = blockNewest.timestamp - blockBefore.timestamp;
                            }
                            $scope.range1 = 100;
                            range = $scope.range1;
                            var blockPast = web3.eth.getBlock(Math.max($scope.blockNum - range, 0));
                            if (blockBefore !== undefined) {
                                $scope.blocktimeAverage1 = ((blockNewest.timestamp - blockPast.timestamp) / range).toFixed(2);
                            }
                            $scope.range2 = 1000;
                            range = $scope.range2;
                            var blockPast = web3.eth.getBlock(Math.max($scope.blockNum - range, 0));
                            if (blockBefore !== undefined) {
                                $scope.blocktimeAverage2 = ((blockNewest.timestamp - blockPast.timestamp) / range).toFixed(2);
                            }
                            $scope.range3 = 10000;
                            range = $scope.range3;
                            var blockPast = web3.eth.getBlock(Math.max($scope.blockNum - range, 0));
                            if (blockBefore !== undefined) {
                                $scope.blocktimeAverage3 = ((blockNewest.timestamp - blockPast.timestamp) / range).toFixed(2);
                            }
                            $scope.range4 = 100000;
                            range = $scope.range4;
                            var blockPast = web3.eth.getBlock(Math.max($scope.blockNum - range, 0));
                            if (blockBefore !== undefined) {
                                $scope.blocktimeAverage4 = ((blockNewest.timestamp - blockPast.timestamp) / range).toFixed(2);
                            }

                            range = $scope.blockNum;
                            var blockPast = web3.eth.getBlock(1);
                            if (blockBefore !== undefined) {
                                $scope.blocktimeAverageAll = ((blockNewest.timestamp - blockPast.timestamp) / range).toFixed(2);
                            }


                            //fastAnswers($scope);
                            //$scope=BlockExplorerConstants($scope);

                        }
                    }

                    // Block Explorer Info

                    $scope.isConnected = web3.isConnected();
                    //$scope.peerCount = web3.net.peerCount;
                    $scope.versionApi = web3.version.api;
                    $scope.versionClient = web3.version.client;
                    $scope.versionNetwork = web3.version.network;
                    $scope.versionCurrency = web3.version.ethereum; // TODO: change that to currencyname?

                    // ready for the future:
                    try {
                        $scope.versionWhisper = web3.version.whisper;
                    } catch (err) {
                        $scope.versionWhisper = err.message;
                    }

                });

            function getChainInfos() {
                var deferred = $q.defer();
                deferred.resolve(0); // dummy value 0, for now. // see blockInfosController.js
                return deferred.promise;
            }
        };
        $scope.init();
        console.log($scope.result);

    };
})();

(function() {
    angular
        .module('myApp')

        .controller('mainDashCtrl', mainDashCtrl);


    mainDashCtrl.$inject = ['$rootScope', '$scope', '$location', '$timeout'];


    function mainDashCtrl($rootScope, $scope, $location, $timeout) {
        var web3 = $rootScope.web3;
        var BigNumber = require('bignumber.js');
        // Display & update block list
        // getETHRates();
        updateBlockList();
        updateTXList();
        updateStats();
        // getHashrate();

        web3.eth.filter("latest").watch(function(error, result) {
            if (error) {
                console.log(error);
            } else {
                updateBlockList();
                updateTXList();
                updateStats();
                $scope.$apply();
            }
        });

        $scope.processRequest = function() {
            var requestStr = $scope.ethRequest;


            if (requestStr !== undefined) {

                // maybe we can create a service to do the reg ex test, so we can use it in every controller ?

                var regexpTx = /[0-9a-zA-Z]{64}?/;
                //var regexpAddr =  /[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}/; // TODO ADDR REGEX or use isAddress(hexString) API ?
                var regexpAddr = /^(0x)?[0-9a-f]{40}$/; //New ETH Regular Expression for Addresses
                var regexpBlock = /[0-9]{1,7}?/;

                var result = regexpTx.test(requestStr);
                if (result === true) {
                    goToTxInfos(requestStr)
                } else {
                    result = regexpAddr.test(requestStr.toLowerCase());
                    if (result === true) {
                        goToAddrInfos(requestStr.toLowerCase())
                    } else {
                        result = regexpBlock.test(requestStr);
                        if (result === true) {
                            goToBlockInfos(requestStr)
                        } else {
                            console.log("nope");
                            return null;
                        }
                    }
                }
            } else {
                return null;
            }
        };


        function goToBlockInfos(requestStr) {
            $location.path('/block/' + requestStr);
        }

        function goToAddrInfos(requestStr) {
            $location.path('/address/' + requestStr.toLowerCase());
        }

        function goToTxInfos(requestStr) {
            $location.path('/tx/' + requestStr);
        }

        function updateStats() {
            $scope.blockNum = web3.eth.blockNumber; // now that was easy

            if ($scope.blockNum !== undefined) {

                // TODO: put the 2 web3.eth.getBlock into the async function below
                //       easiest to first do with fastInfosCtrl
                var blockNewest = web3.eth.getBlock($scope.blockNum);

                if (blockNewest !== undefined) {

                    // difficulty
                    $scope.difficulty = blockNewest.difficulty;
                    $scope.difficultyToExponential = blockNewest.difficulty.toExponential(3);

                    $scope.totalDifficulty = blockNewest.totalDifficulty;
                    $scope.totalDifficultyToExponential = blockNewest.totalDifficulty.toExponential(3);

                    $scope.totalDifficultyDividedByDifficulty = $scope.totalDifficulty.dividedBy($scope.difficulty);
                    $scope.totalDifficultyDividedByDifficulty_formatted = $scope.totalDifficultyDividedByDifficulty.toFormat(1);

                    $scope.AltsheetsCoefficient = $scope.totalDifficultyDividedByDifficulty.dividedBy($scope.blockNum);
                    $scope.AltsheetsCoefficient_formatted = $scope.AltsheetsCoefficient.toFormat(4);

                    // large numbers still printed nicely:
                    $scope.difficulty_formatted = $scope.difficulty.toFormat(0);
                    $scope.totalDifficulty_formatted = $scope.totalDifficulty.toFormat(0);

                    // Gas Limit
                    $scope.gasLimit = new BigNumber(blockNewest.gasLimit).toFormat(0) + " m/s";


                    // Adding new difficulty





                    // Time
                    var newDate = new Date();
                    newDate.setTime(blockNewest.timestamp * 1000);
                    $scope.time = newDate.toUTCString();

                    $scope.secondsSinceBlock1 = blockNewest.timestamp - 1438226773;
                    $scope.daysSinceBlock1 = ($scope.secondsSinceBlock1 / 86400).toFixed(2);

                    // Average Block Times:
                    // TODO: make fully async, put below into 'fastInfosCtrl'

                    var blockBefore = web3.eth.getBlock($scope.blockNum - 1);
                    if (blockBefore !== undefined) {
                        $scope.blocktime = blockNewest.timestamp - blockBefore.timestamp;
                    }
                    $scope.range1 = 100;
                    range = $scope.range1;
                    var blockPast = web3.eth.getBlock(Math.max($scope.blockNum - range, 0));
                    if (blockBefore !== undefined) {
                        $scope.blocktimeAverage1 = ((blockNewest.timestamp - blockPast.timestamp) / range).toFixed(2);
                    }
                    $scope.range2 = 1000;
                    range = $scope.range2;
                    var blockPast = web3.eth.getBlock(Math.max($scope.blockNum - range, 0));
                    if (blockBefore !== undefined) {
                        $scope.blocktimeAverage2 = ((blockNewest.timestamp - blockPast.timestamp) / range).toFixed(2);
                    }
                    $scope.range3 = 10000;
                    range = $scope.range3;
                    var blockPast = web3.eth.getBlock(Math.max($scope.blockNum - range, 0));
                    if (blockBefore !== undefined) {
                        $scope.blocktimeAverage3 = ((blockNewest.timestamp - blockPast.timestamp) / range).toFixed(2);
                    }
                    $scope.range4 = 100000;
                    range = $scope.range4;
                    var blockPast = web3.eth.getBlock(Math.max($scope.blockNum - range, 0));
                    if (blockBefore !== undefined) {
                        $scope.blocktimeAverage4 = ((blockNewest.timestamp - blockPast.timestamp) / range).toFixed(2);
                    }

                    range = $scope.blockNum;
                    var blockPast = web3.eth.getBlock(1);
                    if (blockBefore !== undefined) {
                        $scope.blocktimeAverageAll = ((blockNewest.timestamp - blockPast.timestamp) / range).toFixed(2);
                    }

                    //fastAnswers($scope);
                    //$scope=BlockExplorerConstants($scope);

                }
            }
            // Block Explorer Info
            $scope.isConnected = web3.isConnected();
            //$scope.peerCount = web3.net.peerCount;
            $scope.versionApi = web3.version.api;
            $scope.versionClient = web3.version.client;
            //$scope.versionNetwork = web3.version.network;
            $scope.versionCurrency = web3.version.ethereum; // TODO: change that to currencyname?

            // ready for the future:
            try {
                $scope.versionWhisper = web3.version.whisper;
            } catch (err) {
                $scope.versionWhisper = err.message;
            }
        }


        function updateTXList() {
            var currentTXnumber = web3.eth.blockNumber;
            $scope.txNumber = currentTXnumber;
            $scope.recenttransactions = [];
            for (var i = 0; i < 10 && currentTXnumber - i >= 0; i++) {
                if (web3.eth.getTransactionFromBlock(currentTXnumber - i) != null) {
                    $scope.recenttransactions.push(web3.eth.getTransactionFromBlock(currentTXnumber - i));
                }
            }
        }

        function updateBlockList() {
            var currentBlockNumber = web3.eth.blockNumber;
            $scope.blockNumber = currentBlockNumber;
            $scope.blocks = [];
            for (var i = 0; i < 10 && currentBlockNumber - i >= 0; i++) {
                $scope.blocks.push(web3.eth.getBlock(currentBlockNumber - i));
            }
        }

    }
})();

(function() {
    angular
        .module('myApp')

        .controller('transactionInfosCtrl', transactionInfosCtrl);

    transactionInfosCtrl.$inject = ['$rootScope', '$scope', '$location', '$stateParams', '$q'];

    function transactionInfosCtrl($rootScope, $scope, $location, $routeParams, $q) {
        var web3 = $rootScope.web3;
        $scope.init = function() {


            $scope.txId = $routeParams.transactionId;




            if ($scope.txId !== undefined) { // add a test to check if it match tx paterns to avoid useless API call, clients are not obliged to come from the search form...

                getTransactionInfos()
                    .then(function(result) {
                        //TODO Refactor this logic, asynchron calls + services....
                        var number = web3.eth.blockNumber;

                        $scope.result = result;

                        if (result.blockHash !== undefined) {
                            $scope.blockHash = result.blockHash;
                        } else {
                            $scope.blockHash = 'pending';
                        }
                        if (result.blockNumber !== undefined) {
                            $scope.blockNumber = result.blockNumber;
                        } else {
                            $scope.blockNumber = 'pending';
                        }
                        $scope.from = result.from;
                        $scope.gas = result.gas;
                        //$scope.gasPrice = result.gasPrice.c[0] + " WEI";
                        $scope.gasPrice = web3.fromWei(result.gasPrice, "ether").toFormat(10) + " ETH";
                        $scope.hash = result.hash;
                        $scope.input = result.input; // that's a string
                        $scope.nonce = result.nonce;
                        $scope.to = result.to;
                        $scope.transactionIndex = result.transactionIndex;
                        //$scope.ethValue = web3.fromWei(result.value[0], "ether"); Newer method but has ""
                        $scope.ethValue = result.value.c[0] / 10000;
                        $scope.txprice = web3.fromWei(result.gas * result.gasPrice, "ether") + " ETH";
                        if ($scope.blockNumber !== undefined) {
                            $scope.conf = number - $scope.blockNumber;
                            if ($scope.conf === 0) {
                                $scope.conf = 'unconfirmed'; //TODO change color button when unconfirmed... ng-if or ng-class
                            }
                        }
                        //TODO Refactor this logic, asynchron calls + services....
                        if ($scope.blockNumber !== undefined) {
                            var info = web3.eth.getBlock($scope.blockNumber);
                            if (info !== undefined) {
                                $scope.time = info.timestamp;
                            }
                        }

                    });

            } else {
                $location.path("/"); // add a trigger to display an error message so user knows he messed up with the TX number
            }


            function getTransactionInfos() {
                var deferred = $q.defer();

                web3.eth.getTransaction($scope.txId, function(error, result) {
                    if (!error) {
                        deferred.resolve(result);
                    } else {
                        deferred.reject(error);
                    }
                });
                return deferred.promise;

            }



        };
        $scope.init();
        console.log($scope.result);

    };
})();

(function() {
    angular
        .module('myApp')
        .controller('dashboardCtrl', dashboardCtrl);

    dashboardCtrl.$inject = ['$scope', '$http', 'authentication'];

    function dashboardCtrl($scope, $http, authentication) {
        console.log("inside dashboardCtrl ");
        var vm = this;
        vm.showAccordion = false;
        vm.lcDetailsEnabled = true;
        $scope.today = new Date();


        vm.showRadioBtnDetail = function(formobj, slctdRadioBtn) {
            console.log("slctdRadioBtn=" + slctdRadioBtn);
            formobj.lcSelected = "";
            vm.lcDetailsEnabled = true;
            vm.showAccordion = false;
            console.log("dashboardForm.lcSelected==" + formobj.lcSelected);
            if (slctdRadioBtn == 'contractDate') {
                if (formobj.startDate != undefined && formobj.endDate != undefined) {
                    console.log("from date" + formobj.startDate);
                    console.log("from date" + formobj.endDate);

                    $http.get('/dashboard/fetchPO/' + formobj.startDate + '/' + formobj.endDate, {
                        headers: {
                            Authorization: 'Bearer ' + authentication.getToken()
                        }
                    }).then(function(response) {
                        console.log("dashboard controller-if");
                        $scope.dashboards = response.data;
                        console.log("dashboard controller-if-1" + response.data);
                    }, function(response) {
                        console.log(response.status);
                    });
                }
            } else if (slctdRadioBtn == 'poNumber' || slctdRadioBtn == 'lcNumber') {
                formobj.startDate = "";
                formobj.endDate = "";
                // if selected radio type is not date, its either PO or LC Number
                $http.get('/dashboard/LCDetails', {
                    headers: {
                        Authorization: 'Bearer ' + authentication.getToken()
                    }
                }).then(function(response) {
                    console.log("dashboard controller-else");
                    $scope.dashboards = response.data;
                    console.log(response.data);
                }, function(response) {
                    console.log(response.status);
                });
            }


        }

        vm.toTimestamp = function(timeObj) {
            return new Date(timeObj).getTime();
        }

        vm.showLCDetail = function(lcDetails) {
            console.log("lcNumber is" + lcDetails.lcNumber);
            vm.showAccordion = true;
            vm.lcDetailsEnabled = false;
        };

        $scope.range = function(min, max, step) {
            console.log("max=" + max);
            step = step || 1;
            var input = [];
            for (var i = min; i <= max; i += step) {
                input.push(i);
            }
            return input;
        };
    }



})();

// (function() {
//
//     angular
//         .module('myApp')
//         .controller('detailsCtrl', detailsCtrl);
//
//     detailsCtrl.$inject = ['$scope', '$http', '$stateParams', 'authentication'];
//
//
//     function detailsCtrl($scope, $http, $stateParams, authentication) {
//         $http.get('/artists/list', {
//             headers: {
//                 Authorization: 'Bearer ' + authentication.getToken()
//             }
//         }).then(function(response) {
//             $scope.artists = response.data;
//             $scope.whichItem = $stateParams.itemId;
//             console.log($scope.whichItem);
//
//             if ($stateParams.itemId > 0) {
//                 $scope.prevItem = Number($stateParams.itemId) - 1;
//             } else {
//                 $scope.prevItem = $scope.artists.length - 1;
//             }
//
//             if ($stateParams.itemId < $scope.artists.length - 1) {
//                 $scope.nextItem = Number($stateParams.itemId) + 1;
//             } else {
//                 $scope.nextItem = 0;
//             }
//         }, function(response) {
//
//             console.log(response.status);
//         });
//
//     }
// })();

// // //inject angular file upload directives and services.
// // var app = angular.module('fileUpload', ['ngFileUpload']);
//
// (function() {
//
//     angular
//         .module('myApp')
//         .controller('fileCtrl', fileCtrl);
//
//     fileCtrl.$inject = ['$scope', 'Upload', '$timeout'];
//
//     function fileCtrl($scope, Upload, $timeout) {
//         $scope.uploadFiles = function(files) {
//             $scope.files = files;
//             if (files && files.length) {
//                 Upload.upload({
//                     url: '/file/upload',
//                     data: {
//                         files: files
//                     }
//                 }).then(function(response) {
//                     $timeout(function() {
//                         $scope.result = response.data;
//                     });
//                 }, function(response) {
//                     if (response.status > 0) {
//                         $scope.errorMsg = response.status + ': ' + response.data;
//                     }
//                 }, function(evt) {
//                     $scope.progress =
//                         Math.min(100, parseInt(100.0 * evt.loaded / evt.total));
//                 });
//             }
//         };
//     }
// })();


angular.module("myApp").controller("FooterController", ["$scope", function ($scope) {
 
    $scope.submitFeedback = function(action) {
       return;
    }
 
}]);
(function() {
    angular
        .module('myApp')
        .controller('homeCtrl', homeCtrl);

    homeCtrl.$inject = ['$scope', '$http', '$state', 'authentication'];

    function homeCtrl($scope, $http, $state, authentication) {
        var vm = this;

        vm.init = function() {
            $http.get('/home/details/', {
                headers: {
                    Authorization: 'Bearer ' + authentication.getToken()
                }
            }).then(function(response) {
                    console.log("HOME");
                    var userInfo = authentication.currentUser();
                    var homePageData = response.data;
                    var issueBnk;
                    var reUseData;
                    var homePage ={
                      reUseData:"",
                      issueBnk:"",
                      tableHeading1:"",
                      tableHeading2:"",
                      state:"",
                      state1:"",
                      isAppForm:""
                    };

                    if (userInfo.role == 200) {
                        issueBnk = homePageData.filter(function(dataObj) {
                            return (dataObj.lcValue == '100');
                        });
                        reUseData = homePageData.filter(function(dataObj) {
                            return (dataObj.lcValue == '500');
                        });
                        homePage.tableHeading1 = "Issue LC";
                        homePage.tableHeading2 = "Lodge documents";

                        homePage.issueBnk = issueBnk;
                        homePage.reUseData = reUseData;

                        homePage.state1="issueBankLndingPage";
                        homePage.state="acceptLodgementPage";
                    } else if (userInfo.role == 300) {
                          homePage.tableHeading2 = "Accept LC";
                          homePage.state="advisingBankLndingPage";
                          homePage.reUseData= homePageData;
                    } else if (userInfo.role == 400) {
                        homePage.tableHeading2 = "Upload Documents";
                        homePage.state="beneficiaryLndingPage";
                        homePage.reUseData= homePageData;
                    } else if (userInfo.role == 500) {
                        homePage.tableHeading2 = "Lodge Documents";
                        homePage.reUseData= homePageData;
                        homePage.state="presentingLandingPage";
                    }
                    else if (userInfo.role == 100) {
                      homePage.isAppForm = true;
                    }


                    vm.homePageData = homePage;
                    console.log(vm.homePageData);
                },
                function(err) {


                });
        }
        vm.init();

    }
})();

// (function() {
//
//     angular
//         .module('myApp')
//         .controller('ipfsCtrl', ipfsCtrl)
//         .directive('ngFiles', ['$parse', function($parse) {
//
//             function fn_link(scope, element, attrs) {
//                 var onChange = $parse(attrs.ngFiles);
//                 element.on('change', function(event) {
//                     onChange(scope, {
//                         $files: event.target.files
//                     });
//                 });
//             };
//
//             return {
//                 link: fn_link
//             }
//         }])
//
//
//     ipfsCtrl.$inject = ['$scope', '$http', '$state'];
//
//     function ipfsCtrl($scope, $http) {
//
//         var formdata = new FormData();
//         $scope.getTheFiles = function($files) {
//             angular.forEach($files, function(value, key) {
//                 formdata.append(key, value);
//             });
//         };
//         $scope.uploadFiles = function() {
//             var request = {
//                 method: 'POST',
//                 url: 'http://127.0.0.1:5001/api/v0/add',
//                 data: formdata,
//                 headers: {
//                     'Content-Type': undefined
//                 }
//             };
//
//             // SEND THE FILES.
//             $http(request)
//                 .then(function(response) {
//                         $scope.message = response.data.Hash;
//                     },
//                     function(response) {
//                         console.log('Failed');
//                         $scope.message = response.error;
//                     }
//                 );
//
//         }
//
//         $scope.viewIPFS = function() {
//             var fileHash = $scope.file.hash;
//             // /$scope.ipfsUrl = 'http://127.0.0.1:5001/api/v0/cat?arg=' + fileHash;
//             $scope.ipfsUrl = 'http://ipfs.io/ipfs/' + fileHash;
//         }
//     }
// })();
//
//
// var ipfs = window.IpfsApi('localhost', '5001');

/**
 * @author sukohli@deloitte.com
 * /issueBank/home -> controller
 * This controller handles Issue LC, prepopulates, uploads
 * file to ipfs and submits form
 */
(function() {
    angular
        .module('myApp')
        .controller('issueBankCtrl', issueBankCtrl);

    issueBankCtrl.$inject = ['$http', '$scope', '$rootScope', 'apiCall', 'authentication', '$stateParams'];

    function issueBankCtrl($http, $scope, $rootScope, apiCall, authentication, $stateParams) {
        var vm = this;


        // using below regex in ng-pattern
        $scope.onlyNumbers = /^[0-9]{1,7}$/;

        vm.lcDetails = {
            lcFee: "",
            lcNumber: "",
            lcValue: "",
            lcTerms: "",
            message: "",
            showAccordion: false
        };

        console.log("Issue Bank controller !!");

        vm.clear = function() {
            vm.lcDetails.lcNumber = "";
            vm.lcDetails.lcValue = "";
            vm.lcDetails.lcTerms = "";
            vm.lcDetails.message = "";
            $scope.issueLcForm = "";
            vm.lcDetails.lcFee = "";
            vm.lcDetails.lcDocsRequired = "";
            vm.lcDetails.showAccordion = false;
            vm.acceptLcForm.lcNumber.$setValidity('lcUnique', true);
            vm.acceptLcForm.$setPristine();
        }

        vm.submit = function() {
            console.log("Submit function called!");
            var mybody = angular.element(document).find('body');
            mybody.addClass('waiting');
            var lcRequest = {
                "contractID": $scope.issueLcForm._id,
                "lcNumber": vm.lcDetails.lcNumber,
                "lcValue": vm.lcDetails.lcValue,
                "lcTerms": vm.lcDetails.lcTerms,
                "lcFee": vm.lcDetails.lcFee,
                "lcDocsRequired": vm.lcDetails.lcDocsRequired,
                "advisingBankId":vm.lcDetails.advisingBankId
            };
            // disabling submit button
            vm.clear();
            vm.lcDetails.message = "--- Issue Lc In Progress, Please Wait ---";
            apiCall
                .makeCall("/lcRequest/saveLcForm", "post", lcRequest)
                .then(
                    function(response) {
                        // console.log(response.status);
                        // console.log(response.data);
                        console.log("calling init again to update PO Number list");
                        vm.init();
                        vm.clear();
                        mybody.removeClass('waiting');
                        vm.lcDetails.message = response.data;
                    }
                )
        }

        vm.fileView = function(issueLcForm) {
            var fileName = issueLcForm.initiaterFileName;
            window.open("/static/uploadedFiles/" + fileName, "_blank");
        }
        vm.changeLcFee = function(lcValue) {
            // value="{{ ((vm.lcDetails.lcValue * (issueLcForm.lcDuration+issueLcForm.usancePeriod) * 0.75)/365) | number:3}}"
            var RatePercent = 0.0075;
            console.log(lcValue);
            if (lcValue != null && lcValue != "" && lcValue != undefined) {
                console.log("LC duration" + $scope.issueLcForm.lcDuration);
                console.log("Usance Period" + $scope.issueLcForm.usancePeriod);
                console.log("LC Value" + lcValue);
                // var lcFee = (lcValue * ($scope.issueLcForm.lcDuration+$scope.issueLcForm.usancePeriod) * RatePercent) / 365;
                /*var lcFee = (lcValue (1+($scope.issueLcForm.tolerancePercent/100)*RatePercent) * Math.round(($scope.issueLcForm.lcDuration + $scope.issueLcForm.usancePeriod +1 )/30)/12 * (1+.14+.005+.005);
                 */
                console.log("LC Fees" + lcFee);
                vm.lcDetails.lcFee = lcFee.toFixed(2);
            }
        }
        vm.prepopulateLCDetails = function(lcDetails) {
            console.log(lcDetails);
            vm.lcDetails.showAccordion = true;
            var RatePercent = 0.0075;
            if ($scope.issueLcForm != "" && $scope.issueLcForm != undefined &&
                $scope.issueLcForm != null) {
                /*vm.lcDetails.lcFee = ((lcDetails.poValue *
									($scope.issueLcForm.lcDuration+$scope.issueLcForm.usancePeriod) *
									RatePercent) / 365);
									*/


                var lcFee_1 = lcDetails.poValue * (1 + ($scope.issueLcForm.tolerancePercent / 100)) * RatePercent;
                var lcFee_2 = Math.ceil(($scope.issueLcForm.lcDuration + $scope.issueLcForm.usancePeriod + 1) / 30);
                vm.lcDetails.lcFee = (lcFee_1 * lcFee_2) / 12 * (1 + .14 + .005 + .005);

                console.log("========LC FEE =====" + vm.lcDetails.lcFee);
                // 1 LC creation Fee = [(LC Duration + Usance Period) x Rate%]/365
            }
            vm.lcDetails.lcValue = lcDetails.poValue;
        }
        // Prepopulate PO Number
        vm.init = function() {
            console.log("Prepopulate init function called !!");
            // get PO number from mongo
            apiCall
                .makeCall("lcRequest/getPoNumbers", "get")
                .then(
                    function(response) {
                        console.log(response.status);
                        // console.log(response.data);
                        $scope.lcRequestDetails = response.data;
                    }
                ).then(function() {
                        apiCall.makeCall("lcRequest/fetchAdvBank", "get")
                        .then(function(response) {
                            $scope.advBanks = response.data;
                        })
                    }
                )
                .then( function(){
                  if( $stateParams.actionItem != "" && $stateParams.actionItem != null ){
                    console.log("action item not null");
                    console.log($stateParams.actionItem);
                    // console.log($scope.lcRequestDetails[1].poNumber);

                  var selectedPoNumber = $scope.lcRequestDetails.filter(function( dataObj ) {
                          return (dataObj.poNumber == $stateParams.actionItem ) ;
                        });
                  $scope.issueLcForm = selectedPoNumber[0];
                  // to populate lc fee and amount
                  vm.prepopulateLCDetails($scope.issueLcForm);
                  $stateParams.actionItem = "";
                  }
                });
        }

        // select active bootstrap tab
        vm.setTab = function(index) {
            if (index == $rootScope.tabIdentifier) {
                return "active";
            } else {
                return false;
            }
        }

        // calling on load of page
        vm.init();

        // Function to check if LC/Documentary Credit Number is unique for a issueBank
        vm.validateLcNumber = function(lcNumber) {
            console.log("validating lcNumber on blur");
            console.log("lcNumber is : " + lcNumber);
            // encoding while sending as get query parameter
            lcNumber = encodeURIComponent(lcNumber);
            console.log("Encoding lcNumber is : " + lcNumber);
            var issuingBankId = authentication.currentUser().userId;
            if (lcNumber != undefined && lcNumber != "" && lcNumber != null) {
                $http.get('/lcRequest/validateLcNumber/' + lcNumber + '/' + issuingBankId, {
                    headers: {
                        Authorization: 'Bearer ' + authentication.getToken()
                    },
                }).then(function(response) {
                        // if poNumber is unique
                        console.log(response.data.message);
                        // $scope.createLcRequestForm.poNumber.$setValidity("poUnique",true);
                    },
                    function(err) {
                        // if poNumber already exists in DB
                        console.log(err.data.message);
                        vm.acceptLcForm.lcNumber.$setValidity("lcUnique", false);
                        // $scope.createLcRequestForm.poNumber.$setValidity("poUnique",false);
                    });
            }
        }

        vm.removeUniqueMsg = function() {
            vm.acceptLcForm.lcNumber.$setValidity("lcUnique", true);
            // $scope.createLcRequestForm.poNumber.$setValidity("poUnique",true);
        }

        vm.populateAdvising = function(advBank) {
            $scope.issueLcForm.advisingBankId.branch=advBank.branch;
            $scope.issueLcForm.advisingBankId.address=advBank.address;
            vm.lcDetails.advisingBankId=advBank._id;
        };
    }
})();

// (function() {
//
//     angular
//         .module('myApp')
//         .controller('listCtrl', listCtrl);
//
//     listCtrl.$inject = ['$scope', '$http', '$state', 'authentication'];
//
//     function listCtrl($scope, $http, $state, authentication) {
//
//         $http.get('/artists/list', {
//             headers: {
//                 Authorization: 'Bearer ' + authentication.getToken()
//             }
//         }).then(
//             function(response) {
//                 // $scope.status = response.status;
//
//                 $scope.artists = response.data;
//                 $scope.artistOrder = 'reknown';
//             },
//             function(response) {
//                 console.log(response.status);
//                 console.log(response.error);
//                 console.log(response.data);
//                 $scope.data = response.data || 'Request failed';
//                 $scope.status = response.status;
//             });
//
//
//
//     }
// })();

(function() {
    angular
        .module('myApp')
        .controller('loginCtrl', loginCtrl);

    loginCtrl.$inject = ['$state', 'authentication'];

    function loginCtrl($state, authentication) {
        var vm = this;

        if (authentication.isLoggedIn()) {
            console.log(authentication.getToken());
            $state.go('home');
        }

        vm.credentials = {
            email: "",
            password: ""
        };

        vm.errorMsg = {
            message: ""
        };


        vm.login = function() {
            authentication
                .login(vm.credentials)
                .then(function(response) {
                    if (response.status !== 200) {
                        vm.errorMsg.message = response.data.message;
                        $state.go('login');
                    } else {
                        $state.go('home');
                    }

                }, function(response) {
                    // in case Angular service failed
                });
        };
    };

})();

(function() {

    angular
        .module('myApp')
        .controller('navigationCtrl', navigationCtrl);

    //TODO - remove HTTP after test , we should not make Service calls from here
    navigationCtrl.$inject = ['$location', 'authentication', '$state', '$http',
    '$rootScope'];

    function navigationCtrl($location, authentication, $state, $http,
      $rootScope) {
        var vm = this;

        vm.isLoggedIn = authentication.isLoggedIn();

        vm.currentUser = authentication.currentUser();

        vm.role = authentication.role();
        console.log("Current User Roles: => ");
        console.log(vm.role);

        vm.ifRoleExists = function(role){
          var result = vm.role.indexOf(role);
          if( result == -1 ){
            return false;
          }
          return true;
        }


        vm.logout = function() {
            authentication
                .logout();
            // $state.go('logout');
        };

        vm.inState = function(state) {
            return $state.is(state);
        }

        vm.deployContract = function() {
            $http.get('/eth/socket', {
                headers: {
                    Authorization: 'Bearer ' + authentication.getToken()
                }
            }).then(
                function(response) {
                    console.log(response);

                },
                function(response) {
                    console.log(response.data.message);
                });

        }

        vm.setTabIdentifier = function(id){
          // console.log("reached tab identifier !!");
          // console.log(id);
          $rootScope.tabIdentifier = id;
          // console.log($rootScope.tabIdentifier);
        }
    }

})();

(function() {
    angular
        .module('myApp')
        .controller('issueFormCtrl', issueFormCtrl);

    issueFormCtrl.$inject = ['$scope','$http','authentication'];

    function issueFormCtrl($scope,$http,authentication) {
      console.log("inside IssueForm controller@@@@@@@@@");
      var vm=this;
      $http.get('/issuingForm/issue', {
                 headers: {
                     Authorization: 'Bearer ' + authentication.getToken()
                 }
             }).then(function(response) {

                 $scope.poList = response.data;

                 console.log(response.data);


             }, function(response) {

                 console.log(response.status);
             });


             vm.fetchDetail = function(id) {
                var po = id.po;
               $http.get('/issuingForm/fetchdetail/'+po, {
                          headers: {
                              Authorization: 'Bearer ' + authentication.getToken()
                          }
                      }).then(function(response) {
                          $scope.poDetail= response.data;
                          console.log(response.data);
                      }, function(response) {
                          console.log(response.status);
                      });


             };

             vm.submit = function(id) {
               console.log("The submit call to service");
               var po = {'po': id.po};
                 $http.post('/issuingForm/submit/',po, {
                            headers: {
                                Authorization: 'Bearer ' + authentication.getToken()
                            }
                        }).then(function(response) {
                          console.log(response);
                            // $scope.messsage= "Workflow changes done";
                        }, function(response) {
                            console.log(response);
                        });


             };

        }
    })();

(function() {
    angular
        .module('myApp')
        .controller('notificationCtrl', notificationCtrl);

    notificationCtrl.$inject = ['$scope', '$http', 'authentication', '$timeout', '$state'];

    function notificationCtrl($scope, $http, authentication, $timeout, $state) {
        var vm = this;
        vm.showAccordion = false;
        vm.lcDetailsEnabled = true;
        // ENUM
        $scope.notificatoinText = [{
                99: "Stage 'Initiate LC Request'[PO# {0}]: Request initiated by {1}. File - {3} uploaded successfully. Block chain processing commenced."
            },
            {
                100: "Stage 'Initiate LC Request'[PO# {0}]: Block chain processing completed. Documents forwarded to issuing bank. Request Initiation complete. "
            },
            {
                199: "Stage 'Issuing bank verification'[LC# {2}]: Documents reviewed and verified. Block chain processing commenced. "
            },
            {
                200: "Stage 'Issuing bank verification'[LC# {2}]: Block chain processing completed. Documents forwarded to Advising bank. Issuing bank verification stage complete."
            },
            {
                299: "Stage 'Advising bank verification'[LC# {2}]: Documents reviewed and verified. Block chain processing commenced. "
            },
            {
                300: "Stage 'Advising bank verification'[LC# {2}]: Block chain processing completed. Documents forwarded to beneficiary. Advising bank verification stage complete."
            },
            {
                399: "Stage 'Beneficiary proof submission'[LC# {2}]: LC documents reviewed by beneficiary. Bill and Proof documents uploaded successfully.  Block chain processing commenced."
            },
            {
                400: "Stage 'Beneficiary proof submission' [LC# {2}]: Block chain processing completed. Bill and Proof documents forwarded to Presenting bank. Beneficiary proof submission stage complete."
            },
            {
                499: "Stage 'Presenting bank verification'[LC# {2}]: Bill and Proof documents reviewed and verified. Block chain processing commenced."
            },
            {
                500: "Stage 'Presenting bank verification'[LC# {2}]: Block chain processing completed. Bill and Proof documents forwarded to Issuing bank. Presenting bank verification stage complete."
            },
            {
                599: "Stage 'Issuing bank Lodgement'[LC# {2}]: Bill and Proof documents reviewed and verified. LC amount released to Presenting bank. Block chain processing commenced. "
            },
            {
                600: "Stage 'Issuing bank Lodgement'[LC# {2}]: Block chain processing completed. Bill and Proof documents lodged. LC amount transferred. Issuing bank Lodgement stage complete."
            }
        ];



        $scope.reload = function() {
            $http.get('/notification/LCDetails', {
                headers: {
                    Authorization: 'Bearer ' + authentication.getToken()
                }
            }).then(function(response) {
                // console.log("notification controller");
                vm.notifications = response.data;

                vm.workFlowsSeg = [];
                var poNumbers = [];
                var workFlows = [];
                var workFlowsSeg = [];
                var myMap = new Map();
                var first = 1;
                var value = -1;
                // console.log(response.data);
                angular.forEach(response.data, function(item) {
                    angular.forEach(item.workflows, function(workflow) {

                        // console.log(workflow);

                        var dateToSet = new Date(workflow.createdDateUTC);
                        var timeToSet = dateToSet.getTime(); // + dateToSet.getTimezoneOffset()*60*1000;
                        if (typeof myMap.get(timeToSet) !== 'undefined') {

                            var timeSegregation = myMap.get(timeToSet);
                            var timeSegregation1 = [];
                            timeSegregation1.transactionDT = workflow.createdDateUTC;
                            timeSegregation1.fileName = item.initiaterFileName;
                            timeSegregation1.stage = workflow.stage;
                            timeSegregation1.poNumbers = item.poNumber;
                            timeSegregation1.lcNumber = item.lcNumber;
                            timeSegregation1.buyerName = item.buyerId.name;
                            timeSegregation1.timeStamp = workflow.createdDateUTC;
                            timeSegregation1.offSet = timeToSet;
                            timeSegregation1.transactionHash = workflow.transactionHash;
                            timeSegregation.push(timeSegregation1);
                            myMap.set(timeToSet, timeSegregation);
                        } else {
                            var timeSegregation = [];
                            timeSegregation.transactionDT = workflow.createdDateUTC;
                            timeSegregation.fileName = item.initiaterFileName;
                            timeSegregation.stage = workflow.stage;
                            timeSegregation.poNumbers = item.poNumber;
                            timeSegregation.lcNumber = item.lcNumber;
                            timeSegregation.buyerName = item.buyerId.name;
                            timeSegregation.timeStamp = workflow.createdDateUTC;
                            timeSegregation.offSet = timeToSet;
                            timeSegregation.transactionHash = workflow.transactionHash;
                            myMap.set(timeToSet, timeSegregation);
                        }

                        // Self code for Creating Array

                        /*  var dateToSet1 = new Date(workflow.createdDateUTC);
                  var timeToSet1 = dateToSet1.getTime() ; //+ dateToSet1.getTimezoneOffset()*60*1000;
                  var tymStamp = timeToSet1;

                    value = -1;
                    if (first == 1) {
                        first = 2;
                        console.log("first time ");
                        var sameTime = [];
                        var dateToSet2 = new Date(workflow.createdDateUTC);
                        var timeToSet2 = dateToSet2.getTime() ;//+ dateToSet2.getTimezoneOffset()*60*1000;

                        sameTime.poNumber = item.poNumber;
                        sameTime.stage = workflow.stage;
                        sameTime.timeStamp = workflow.createdDateUTC;
                        sameTime.offSet = timeToSet2;
                        sameTime.fileName= item.initiaterFileName;
						sameTime.lcNumber= item.lcNumber;
						sameTime.buyerName= item.buyerId.name;
                        poNumbers.push(sameTime);
                        poNumbers.timeStamp = timeToSet2;
                      //  poNumbers.timeStamp = workflow.createdDateUTC;
                        workFlowsSeg.poNumbers = poNumbers;
                    } else {
                        console.log("The second time and on ");
                        angular.forEach(workFlowsSeg.poNumbers, function(poNumber) {

                          var dateToSet4 = new Date(poNumber.timeStamp);
                          var storedTym = dateToSet4.getTime() ;//+ dateToSet4.getTimezoneOffset()*60*1000;

                          //  var storedTym = poNumber.timeStamp;
                            if (storedTym == tymStamp) {
                                value = 1;
                                var sameTime = [];
                                sameTime.poNumber = item.poNumber;
                                sameTime.stage = workflow.stage;
                                sameTime.timeStamp = workflow.createdDateUTC;
                                sameTime.fileName= item.initiaterFileName;
                                sameTime.offSet = storedTym;
								sameTime.lcNumber= item.lcNumber;
								sameTime.buyerName= item.buyerId.name;
                                poNumber.push(sameTime);
                            }
                        });
                        if (value == -1) {
                            var sameTime = [];
                            var dateToSet = new Date(workflow.createdDateUTC);
                            var timeToSet = dateToSet.getTime() ;//+ dateToSet.getTimezoneOffset()*60*1000;
							sameTime.poNumber = item.poNumber;
                            sameTime.stage = workflow.stage;
                            sameTime.timeStamp = workflow.createdDateUTC;
                            sameTime.fileName= item.initiaterFileName;
							sameTime.lcNumber= item.lcNumber;
							sameTime.buyerName= item.buyerId.name;
                            sameTime.offSet = timeToSet;
                            poNumbers.push(sameTime);
							poNumbers.timeStamp = timeToSet;
                            //poNumbers.timeStamp = workflow.createdDateUTC;
                            workFlowsSeg.poNumbers = poNumbers;
                        }
                    }
					*/
                    });
                });
                /*
            $scope.notificationEntries = workFlowsSeg.poNumbers.sort(function (a, b) {
				  return b.offSet - a.offSet;
			});
			*/
                // console.log(myMap);
                var mapDesc = new Map([...myMap.entries()].sort().reverse());
                // console.log("Sorrted ------");
                $scope.notificationEntries = Array.from(mapDesc);
                console.log($scope.notificationEntries);
            }, function(response) {
                // console.log(response.status);
            });
            // end http get
            timeoutId = $timeout(function() {
                $scope.reload();
            }, 5000)
        };
        $scope.reload();

        $scope.$on("$destroy", function(event) {
            $timeout.cancel(timeoutId);
        });

        vm.toTimestamp = function(timeObj) {
            return new Date(timeObj).getTime();
        }

        vm.showLCDetail = function(lcDetails) {
            // console.log("lcNumber is" + lcDetails.lcNumber);
            vm.showAccordion = true;
            vm.lcDetailsEnabled = false;
        }

        $scope.range = function(min, max, step) {
            // console.log("max=" + max);
            step = step || 1;
            var input = [];
            for (var i = min; i <= max; i += step) {
                input.push(i);
            }
            return input;
        }
    }



})();

// (function() {
//     angular
//         .module('myApp')
//         .controller('logoutCtrl', logoutCtrl);
//
//     logoutCtrl.$inject = ['$state', 'authentication'];
//
//     function logoutCtrl($state, authentication) {
//         var vm = this;
//
//
//
//     }
// })();

(function() {
    angular
        .module('myApp')
        .controller('presentingCtrl', presentingCtrl);

    presentingCtrl.$inject = ['$scope','$http','authentication','$rootScope','$window','$state','$stateParams'];

    function presentingCtrl($scope,$http,authentication, $rootScope,$window,$state,$stateParams) {
		console.log("inside presentingCtrl-1111")
	  var vm = this;
       vm.init = function(){
	     $http.get('/presenting/lcDetails/', {
			 headers: {
				 Authorization: 'Bearer ' + authentication.getToken()
			 }
		 }).then(function(response) {
			$scope.acptLdgmentLCList = response.data;
			console.log($scope.acptLdgmentLCList);
		 }, function(response) {
			   var user = authentication.currentUser();
			   if(user.role!=500) {
				   $scope.errorMsg = "Not the correct role required";
				   $state.go('home');
			   }
			 })
       .then( function(){
         if( $stateParams.actionItem != "" && $stateParams.actionItem != null ){
           console.log("action item not null");
           console.log($stateParams.actionItem);

           console.log($scope.acptLdgmentLCList);
         var selectedLcNumber = $scope.acptLdgmentLCList.filter(function( dataObj ) {
                 return (dataObj.lcNumber == $stateParams.actionItem ) ;
               });
         $scope.acptLdgmentFormDetails = selectedLcNumber[0];
         vm.showAccordion = true;
         $stateParams.actionItem = "";
         }
       });
	   }

	  /* function to enable Accordian on selection of LC Number on the HTML page */
	  vm.fetchDetail = function(lcDetails){
      if( lcDetails != null && lcDetails != ""){
        vm.showAccordion = true;
      }
	  }


	  /* Function to clear the fields on reset button */
	  vm.clear = function(){
			console.log("clear all fields inside acceptLodgementService-2");
		   if( $scope.acptLdgmentFormDetails != "" && $scope.acptLdgmentFormDetails != undefined
          && $scope.acptLdgmentFormDetails != null ){
			  console.log("clearing all fields");
			  $scope.acptLdgmentFormDetails = "";
			  vm.showAccordion=false;
        $scope.displayMessage="";
		  }

	  }

	  /* Function to Save the Advising bank screen details */
	  vm.submit = function(lcDetails){
		  console.log("inside acceptLodgementController->submit()");
		  console.log("contractID="+lcDetails._id);
		  var contractID = {'contractID': lcDetails._id};
		   $http.post('/presenting/acceptLC',contractID, {
                headers: {
                    Authorization: 'Bearer ' + authentication.getToken()
                }
            }).then(
                function(response) {
      			      vm.init();
  			          $scope.displayMessage="Documents Verified and Submitted For Blockchain Processing";
            			vm.showAccordion = false;
                },
                function(response) {
                    console.log(response.data.message);
                });
		}

	  vm.setTab = function(index){
        if( index == $rootScope.tabIdentifier ){
          return "active";
        }
        else{
          return false;
        }
      }
	  vm.init();
    }
})();

angular.module("myApp").directive("footer", function() {
  return {
    restrict: 'A',
    templateUrl: 'partials/footer.html',
    scope: true,
    transclude : false,
    controller: 'FooterController'
  };
});
(function() {
    angular
        .module('myApp')
        .controller('signUpCtrl', signUpCtrl);

    signUpCtrl.$inject = ['$state', 'authentication'];

    function signUpCtrl($state, authentication) {
        var vm = this;
        vm.credentials = {
            name: "",
            email: "",
            password: "",
            address: "",
            role: ""
        };
        vm.errorMsg = {
            message: ""
        };
        vm.submit = function() {
            authentication
                .register(vm.credentials)
                .then(function(response) {
                    if (response.status !== 200) {
                        vm.errorMsg.message = response.data.message;
                        $state.go('signup');
                    } else {
                        $state.go('home');
                    }
                }, function(response) {
                    console.log("In Error of the Angular Service Call");
                });
        };

        vm.clear = function() {
            vm.credentials = {
                name: "",
                email: "",
                password: "",
                role: "",
                address: ""
            };

        }

    }

})();

(function() {
    angular
        .module('myApp')
        .controller('advisingBankCtrl', advisingBankCtrl);

    advisingBankCtrl.$inject = ['$scope','$http','authentication','$rootScope','$window','$state','$stateParams'];

    function advisingBankCtrl($scope,$http,authentication, $rootScope,$window,$state,$stateParams) {
	  var vm = this;
       vm.init = function(){
	     $http.get('/advBank/lcDetails', {
			 headers: {
				 Authorization: 'Bearer ' + authentication.getToken()
			 }
		 }).then(function(response) {
	        $scope.advBankLCList = response.data;
		 }, function(response) {
			   var user = authentication.currentUser();
			   if(user.role!=300) {
				   $scope.errorMsg = "Not the correct role";
				   $state.go('home');
			   }
			 })
       .then( function(){
         if( $stateParams.actionItem != "" && $stateParams.actionItem != null ){
           console.log("action item not null");
           console.log($stateParams.actionItem);

           console.log($scope.advBankLCList);
         var selectedLcNumber = $scope.advBankLCList.filter(function( dataObj ) {
                 return (dataObj.lcNumber == $stateParams.actionItem ) ;
               });
         console.log(selectedLcNumber[0]);
         $scope.advBankFormDetails = selectedLcNumber[0];
         vm.showAccordion = true;
         $stateParams.actionItem = "";
         }
       });
	   }

	  vm.fetchDetail = function(lcDetails){
      if( lcDetails != null && lcDetails != ""){
        vm.showAccordion = true;
      }
	  }

	  /* Function to display the PDF file from IPFS */
	  /*
	  vm.displayPDF = function(lcDetails){
		var fileName = lcDetails.initiaterFileName;
		window.open("/static/uploadedFiles/"+fileName,"_blank");
	  }
	  */

	  /* Function to clear the fields on reset button */
	  vm.clear = function(){
		   if( $scope.advBankFormDetails != "" && $scope.advBankFormDetails != undefined
          && $scope.advBankFormDetails != null ){
			  $scope.advBankFormDetails = "";
		  }
      vm.showAccordion = false;
      $scope.displayMessage = "";
	  }

	  /* Function to Save the Advising bank screen details */
	  vm.submit = function(lcDetails){
		  var contractID = {'contractID': lcDetails._id};
		   $http.post('/advBank/lcAccept',contractID, {
                headers: {
                    Authorization: 'Bearer ' + authentication.getToken()
                }
            }).then(
                function(response) {
      			       vm.init();
                   vm.showAccordion = false;
                   $scope.displayMessage="LC Accepted : Block chain processing initiated";
                },
                function(response) {
                    console.log(response.data.message);
                });
		}
      vm.setTab = function(index){
        if( index == $rootScope.tabIdentifier ){
          return "active";
        }
        else{
          return false;
        }
      }
	  vm.init();
    }
})();

//# sourceMappingURL=data:application/json;charset=utf8;base64,
